{"version":3,"sources":["js/api.js","style/lost_illustration.svg","index.js"],"names":["API_KEY","apiCall","API_URL","callback","errorCallback","fetch","then","handleFetchError","response","json","handleDataError","catch","error","ok","Error","statusText","data","length","captalizeFirstLetter","string","toUpperCase","slice","getCountryNameByCode","code","i","COUNTRIES","name","getUserCoords","navigator","geolocation","getCurrentPosition","position","coords","lon","longitude","lat","latitude","getForecast","res","now","current","next","daily","day","time","dt","temp","Math","round","feels","feels_like","wind","wind_speed","desc","weather","description","icon","day_temp","night_temp","night","formatForecastData","getCoordsByName","loc_name","getNameByCoords","location","country","MONTHS","DAYS","show_error","App","useState","location_data","setLocation","query","setQuery","forecast","setForecast","setError","loading","setLoader","searchWeather","event","preventDefault","API","updateForecast","handleError","getLocalWeather","showCurrentWeather","id","className","formatDate","src","getWeatherIcon","alt","showForecast","upcoming_days","map","index","Fragment","generateNextDay","showSearch","onSubmit","type","placeholder","onChange","e","target","value","onClick","showMap","pos","MapContainer","center","zoom","scrollWheelZoom","TileLayer","url","Marker","UpdateMapView","useMap","setView","href","showWeatherInfo","forecast_el","document","getElementById","error_el","style","opacity","visibility","role","showLoader","error_image","epoch_time","date_obj","Date","getDay","date","getDate","month","getMonth","ReactDOM","render"],"mappings":"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","file":"static/js/main.a0f1e137.chunk.js","sourcesContent":["import COUNTRIES from \"./countryCodes.json\";\r\n\r\n/* CONSTANTS */\r\nconst NUM_COUNTRIES = 249;\r\nconst API_KEY = \"9625d17991923b2fcd6ebcbc7a90fc25\";\r\nconst NUM_UPCOMING_DAYS = 5;\r\n\r\n/* FUNCTIONS */\r\n/* Get location */\r\nfunction getUserCoords(callback) {\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      var coords = {\r\n        lon: position.coords.longitude,\r\n        lat: position.coords.latitude,\r\n      };\r\n\r\n      callback(coords);\r\n    });\r\n  }\r\n}\r\n\r\nfunction getCoordsByName(loc_name, callback, errorCallback) {\r\n  var api_url = `https://api.openweathermap.org/geo/1.0/direct?q=${loc_name}&limit=1&appid=${API_KEY}`;\r\n\r\n  apiCall(\r\n    api_url,\r\n    (response) => {\r\n      var coords = {\r\n        lat: response[0].lat,\r\n        lon: response[0].lon,\r\n      };\r\n\r\n      callback(coords);\r\n    },\r\n    () => {\r\n      errorCallback();\r\n    }\r\n  );\r\n}\r\n\r\nfunction getNameByCoords(coords, callback, errorCallback) {\r\n  var api_url = `https://api.openweathermap.org/geo/1.0/reverse?lat=${coords.lat}&lon=${coords.lon}&limit=1&appid=${API_KEY}`;\r\n\r\n  apiCall(\r\n    api_url,\r\n    (response) => {\r\n      var location = {\r\n        name: response[0].name,\r\n        country: getCountryNameByCode(response[0].country),\r\n        coords: {\r\n          lat: response[0].lat,\r\n          lon: response[0].lon,\r\n        },\r\n      };\r\n      callback(location);\r\n    },\r\n    () => {\r\n      errorCallback();\r\n    }\r\n  );\r\n}\r\n\r\n/* Forecast */\r\nfunction getForecast(coords, callback, errorCallback) {\r\n  var api_url = `https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&exclude=minutely,hourly,alerts&appid=${API_KEY}&units=metric&lang=en`;\r\n  apiCall(\r\n    api_url,\r\n    (response) => {\r\n      callback(formatForecastData(response));\r\n    },\r\n    () => {\r\n      errorCallback();\r\n    }\r\n  );\r\n}\r\n\r\n/* Fetch */\r\nfunction apiCall(API_URL, callback, errorCallback) {\r\n  fetch(API_URL)\r\n    .then(handleFetchError)\r\n    .then((response) => {\r\n      /* Parse response */\r\n      return response.json();\r\n    })\r\n    .then(handleDataError)\r\n    .then((response) => callback(response))\r\n    .catch((error) => errorCallback(error));\r\n}\r\n\r\nfunction handleFetchError(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\nfunction handleDataError(data) {\r\n  if (data.length === 0) {\r\n    throw Error(\"Empty fetch response\");\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/* Format data */\r\nfunction formatForecastData(res) {\r\n  var data = [];\r\n\r\n  var now = res.current; // Data about current weather\r\n  var next = res.daily; // Data about current weather\r\n\r\n  for (var day = 0; day <= NUM_UPCOMING_DAYS; day++) {\r\n    if (day === 0) {\r\n      /* Current weather */\r\n      data[0] = {\r\n        time: now.dt,\r\n        temp: Math.round(now.temp),\r\n        feels: Math.round(now.feels_like),\r\n        wind: Math.round(now.wind_speed),\r\n        desc: captalizeFirstLetter(now.weather[0].description),\r\n        icon: now.weather[0].icon,\r\n      };\r\n    } else {\r\n      /* Upcoming weather */\r\n      data[day] = {\r\n        time: next[day].dt,\r\n        day_temp: Math.round(next[day].temp.day),\r\n        night_temp: Math.round(next[day].temp.night),\r\n        desc: captalizeFirstLetter(next[day].weather[0].description),\r\n        icon: next[day].weather[0].icon,\r\n      };\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction captalizeFirstLetter(string) {\r\n  return string[0].toUpperCase() + string.slice(1);\r\n}\r\n\r\nfunction getCountryNameByCode(code) {\r\n  /* ISO 3166 country codes */\r\n  for (var i = 0; i < NUM_COUNTRIES; i++) {\r\n    if (code === COUNTRIES[i][\"alpha-2\"]) {\r\n      return COUNTRIES[i].name;\r\n    }\r\n  }\r\n}\r\n\r\n/* EXPORT */\r\nexport default { getUserCoords, getForecast, getCoordsByName, getNameByCoords };\r\n","export default __webpack_public_path__ + \"static/media/lost_illustration.5581b6d7.svg\";","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { MapContainer, TileLayer, Marker, useMap } from \"react-leaflet\";\r\n\r\nimport API from \"./js/api\";\r\nimport \"./style/style.css\";\r\nimport error_image from \"./style/lost_illustration.svg\";\r\n\r\n/* CONSTANTS */\r\nconst MONTHS = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst DAYS = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\n/* GLOBAL VARIABLES */\r\nvar show_error = false;\r\n\r\n/* REACT */\r\nfunction App() {\r\n  /* States */\r\n  var [location_data, setLocation] = useState({});\r\n  var [query, setQuery] = useState({});\r\n  var [forecast, setForecast] = useState({});\r\n  var [error, setError] = useState({});\r\n  var [loading, setLoader] = useState(false);\r\n\r\n  /* Events */\r\n  function searchWeather(event) {\r\n    event.preventDefault();\r\n\r\n    setLoader(true);\r\n\r\n    API.getCoordsByName(\r\n      query,\r\n      (coords) => {\r\n        updateForecast(coords);\r\n      },\r\n      () => {\r\n        handleError();\r\n      }\r\n    );\r\n  }\r\n\r\n  function getLocalWeather() {\r\n    setLoader(true);\r\n\r\n    API.getUserCoords(\r\n      (coords) => {\r\n        updateForecast(coords);\r\n      },\r\n      () => {\r\n        handleError();\r\n      }\r\n    );\r\n  }\r\n\r\n  function updateForecast(coords) {\r\n    API.getForecast(\r\n      coords,\r\n      (data) => {\r\n        API.getNameByCoords(\r\n          coords,\r\n          (location) => {\r\n            setLocation(location);\r\n            setForecast(data);\r\n            setError(false);\r\n            setLoader(false);\r\n          },\r\n          () => {\r\n            handleError();\r\n          }\r\n        );\r\n      },\r\n      () => {\r\n        handleError();\r\n      }\r\n    );\r\n  }\r\n\r\n  function handleError() {\r\n    show_error = true;\r\n    setError(true);\r\n    setLoader(false);\r\n  }\r\n\r\n  /* Rendering */\r\n  /* Weather */\r\n  function showWeatherInfo() {\r\n    if (!error) {\r\n      return (\r\n        <React.Fragment>\r\n          <section id=\"forecast\">\r\n            {showMap()}\r\n            {showCurrentWeather()}\r\n            {showForecast()}\r\n          </section>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  function showCurrentWeather() {\r\n    var now = forecast[0];\r\n\r\n    return (\r\n      <div id=\"current_weather\" className=\"day\">\r\n        <div className=\"period\">\r\n          <span className=\"period_title\">Currently</span>\r\n          <span className=\"date\">{formatDate(now.time)}</span>\r\n        </div>\r\n\r\n        <div className=\"weather_tab\">\r\n          <div className=\"temp_side\">\r\n            <div className=\"temp\">{now.temp}°C</div>\r\n            <div className=\"feels\">Feels like {now.feels} °C</div>\r\n          </div>\r\n\r\n          <div className=\"extra_side\">\r\n            <img\r\n              src={getWeatherIcon(now.icon)}\r\n              className=\"weather_icon\"\r\n              alt=\"A symbol for weather\"\r\n            />\r\n            <span className=\"weather_desc\">{now.desc}</span>\r\n            <span className=\"wind\">Wind {now.wind} m/s</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function getWeatherIcon(icon) {\r\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`;\r\n  }\r\n\r\n  function showForecast() {\r\n    var upcoming_days = forecast.slice(1);\r\n\r\n    return (\r\n      <div id=\"upcoming_weather\">\r\n        <span id=\"upcoming_title\" className=\"period_title\">\r\n          Upcoming\r\n        </span>\r\n        {upcoming_days.map((data, index) => {\r\n          return generateNextDay(data, index);\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function generateNextDay(data, index) {\r\n    return (\r\n      <React.Fragment>\r\n        <div key={index} className=\"day\">\r\n          <div className=\"period\">\r\n            <span className=\"date\">{formatDate(data.time)}</span>\r\n          </div>\r\n\r\n          <div className=\"weather_tab\">\r\n            <div className=\"temp_side\">\r\n              <div className=\"temp_wrapper\">\r\n                <span className=\"temp_label\">\r\n                  <i className=\"bi bi-sun\"> </i>\r\n                  Day\r\n                </span>\r\n                <span className=\"temp_value\">{data.day_temp}°C</span>\r\n              </div>\r\n              <div className=\"temp_wrapper\">\r\n                <span className=\"temp_label\">\r\n                  <i className=\"bi bi-moon\"> </i>\r\n                  Night\r\n                </span>\r\n                <span className=\"temp_value\">{data.night_temp}°C</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"extra_side\">\r\n              <img\r\n                src={getWeatherIcon(data.icon)}\r\n                className=\"weather_icon\"\r\n                alt=\"A symbol for weather\"\r\n              />\r\n              <span className=\"weather_desc\">{data.desc}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  /* Search */\r\n  function showSearch() {\r\n    return (\r\n      <section id=\"search\">\r\n        <div>\r\n          <div className=\"col\">\r\n            <form className=\"input-group\" onSubmit={searchWeather}>\r\n              <input\r\n                type=\"text\"\r\n                id=\"search_input\"\r\n                className=\"form-control\"\r\n                placeholder=\"Insert location\"\r\n                onChange={(e) => setQuery(e.target.value)}\r\n              ></input>\r\n              <button\r\n                type=\"button\"\r\n                className=\"form-control\"\r\n                className=\"btn btn-primary\"\r\n                onClick={searchWeather}\r\n              >\r\n                Search\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div className=\"col\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={getLocalWeather}\r\n            >\r\n              Locate me\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  function showLoader() {\r\n    var forecast_el = document.getElementById(\"forecast\");\r\n    var error_el = document.getElementById(\"error\");\r\n\r\n    if (loading) {\r\n      /* Hide elements*/\r\n      if (forecast_el) forecast_el.style.opacity = 0;\r\n      if (error_el) error_el.style.visibility = \"hidden\";\r\n\r\n      return (\r\n        <div className=\"d-flex justify-content-center\">\r\n          <div className=\"spinner-border text-primary\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      /* Show elements */\r\n      if (forecast_el) forecast_el.style.opacity = 1;\r\n      if (error_el) error_el.style.visibility = \"visible\";\r\n\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  function showError() {\r\n    if (error && show_error) {\r\n      return (\r\n        <section id=\"error\">\r\n          <img id=\"error_image\" src={error_image} alt=\"Lost\" />\r\n          <span id=\"error_message\">Error: no such location</span>\r\n        </section>\r\n      );\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  function showMap() {\r\n    var pos = [location_data.coords.lat, location_data.coords.lon];\r\n\r\n    return (\r\n      <section>\r\n        <div id=\"location_name\">\r\n          {location_data.name}, {location_data.country}\r\n        </div>\r\n\r\n        <MapContainer center={pos} zoom={13} scrollWheelZoom={false}>\r\n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n          <Marker position={pos}></Marker>\r\n          <UpdateMapView></UpdateMapView>\r\n        </MapContainer>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  function UpdateMapView() {\r\n    var map = useMap();\r\n    map.setView([location_data.coords.lat, location_data.coords.lon], 13);\r\n    return null;\r\n  }\r\n\r\n  /* Misc */\r\n  function showHeader() {\r\n    return (\r\n      <header>\r\n        <div id=\"site_title\">Peek</div>\r\n        <div id=\"site_subtitle\">A weather app</div>\r\n        <div id=\"author\">\r\n          Made by <a href=\"https://github.com/karltamm\">Karl-Heinrich</a>\r\n        </div>\r\n        {showSearch()}\r\n      </header>\r\n    );\r\n  }\r\n\r\n  /* COMPLETE */\r\n  return (\r\n    <React.Fragment>\r\n      {showHeader()}\r\n      {showWeatherInfo()}\r\n      {showLoader()}\r\n      {showError()}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n/* FUNCTIONS */\r\nfunction formatDate(epoch_time) {\r\n  var date_obj = new Date(epoch_time * 1000); // Convert to milliseconds\r\n\r\n  var day = DAYS[date_obj.getDay()];\r\n  var date = date_obj.getDate();\r\n  var month = MONTHS[date_obj.getMonth()];\r\n\r\n  return `${day}, ${month} ${date}`;\r\n}\r\n"],"sourceRoot":""}